#!/bin/bash
#
# sbox-fstool
# Tool for commit, prune, merge files created in sandbox environment by sbox.
#
# Copyright: 2019 Shawwwn, shawwwn1@gmail.com
# License: MIT
#
# Usage: sbox-fstool commit NAME [-s|--snapshot-dir SNAPS_DIR]
#        sbox-fstool prune NAME [-s|--snapshot-dir SNAPS_DIR] [-r|--rootfs-dir ROOTFS_DIR]
#        sbox-fstool merge NAME [-s|--snapshot-dir SNAPS_DIR] [-r|--rootfs-dir ROOTFS_DIR]
#        sbox-fstool [-h|--help]
#

function help {
	local executable=$(basename $0)
	echo "usage: $executable commit [NAME] [-s|--snapshot-dir SNAPS_DIR]"
	echo "       $executable prune [NAME] [-s|--snapshot-dir SNAPS_DIR] [-r|--rootfs-dir ROOTFS_DIR]"
	echo "       $executable merge [NAME] [-s|--snapshot-dir SNAPS_DIR] [-r|--rootfs-dir ROOTFS_DIR]"
	echo "       $executable [-h|--help]"
	echo ""
	echo "Tool for commit, prune, merge files created in sandbox environment by sbox."
	echo ""
	echo " 	NAME:       sandbox's name, default='default'"
	echo " 	SNAPS_DIR:  sandbox's snapshot, default='/tmp/sbox/<NAME>/snapshot'"
	echo " 	ROOTFS_DIR: system's rootfs for mounting beneath sandbox's writable layer, default='/'"
	echo ""
	echo "	commit:"
	echo "		Move uncommit contents from dirty directory of sandbox <NAME> to its <SNAPS_DIR> directory."
	echo "		This is usually run when sandbox exits."
	echo ""
	echo "	prune:"
	echo "		Remove sandbox <NAME>'s identical files in <SNAPS_DIR> if they are also in <ROOTFS_DIR>"
	echo "		Help to reduce snapshot size."
	echo ""
	echo "	merge:"
	echo "		Merge changes from <SNAPS_DIR> to <ROOTFS_DIR> for sandbox <NAME>."
	echo "		If you want to make changes permanent."
}

# transform long options to short ones
for arg in "$@"; do
	shift
	case "$arg" in
		"--snapshot-dir")   set -- "$@" "-s" ;;
		"--rootfs-dir")     set -- "$@" "-r" ;;
		"--help")           set -- "$@" "-h" ;;
		*)                  set -- "$@" "$arg"
	esac
done

# process options
OPTIND=1
while getopts n:r:d:h opt; do
	case $opt in
		s)                  SNAPS_DIR=$OPTARG ;;
		r)                  ROOTFS_DIR=$OPTARG ;;
		h)                  help; exit ;;
		?)                  help; exit 2 ;;
	esac
done
shift $(expr $OPTIND - 1)

# globals
CMD=$(echo "$1" | awk '{print tolower($0)}')
CONTAINER_NAME="$([ -z "$2" ] && echo 'default' || echo "$2")"
[ -z "$DIRTY_DIR" ] && DIRTY_DIR="/tmp/sbox/$CONTAINER_NAME/dirty"
[ -z "$SNAPS_DIR" ] && SNAPS_DIR="/tmp/sbox/$CONTAINER_NAME/snapshot"
[ -z "$ROOTFS_DIR" ] && ROOTFS_DIR="/"
DIRTY_DIR=$(realpath $DIRTY_DIR 2>/dev/null)
SNAPS_DIR=$(realpath $SNAPS_DIR 2>/dev/null)
ROOTFS_DIR=$(realpath $ROOTFS_DIR 2>/dev/null)


#############################################################
# Check if file is a 0:0 device file
#############################################################
is_removed() {
	if [ "$(stat -c '%t:%T %F' $1)" = "0:0 character special file" ]; then
		return 0
	fi
	return 1
}

#############################################################
# Check if file has xattr "opaque" flag
#############################################################
is_opaque() {
	if [ -d "$1" ] && 
		getfattr -d -m "" "$1" 2>/dev/null | \
			grep "trusted.overlay.opaque=\"y\"" >/dev/null 2>&1; then
			return 0
	fi
	return 1
}

#############################################################
# Check if two files have the same meta data
#############################################################
same_meta() {
	local p1=$(stat -c '%A %u:%g %s' $1) 
	local p2=$(stat -c '%A %u:%g %s' $2)
	[ -d "$1" ] && p1=$(echo $p1 | cut -d' ' -f-2) # remove size info if is dir
	[ -d "$2" ] && p2=$(echo $p2 | cut -d' ' -f-2)
	if [ "$p1" = "$p2" ]; then
		return 0
	fi
	return 1
}

#############################################################
# Compare two files byte-by-byte
#############################################################
same_content() {
	if [ -d "$1" ] && [ -d "$2" ]; then
		return 0 # return if both are dirs
	fi
	cmp -s "$1" "$2"
	return $?
}

#############################################################
# Copy all files/directories from dirty directory to snapshot 
# directory.
# If a directory is marked 'opaque' in dirty dir, then 
# remove corresponding directory from snapshot dir before copy.
#############################################################
commit_all() {
	local path_dirty="$1"
	local path_snapshot="$2"

	# directory doesn't exist or is empty
	if [ ! -d "$path_dirty" ] || [ -z "$(ls -A $path_dirty)" ]; then
		echo "nothing to commit"
		exit 0
	fi

	# remove opaque in snapshot
	local path_wc=$(echo $path_dirty | tr -d '\n\r' | wc -c) # word count w/o newline
	while IFS=$'\n' read -r line; do
		opaque=$(echo "$line" | pcregrep -io1 -e 'file: (.+)$')
		if [ ! -z "$opaque" ]; then
			path_relative=$(echo "$opaque" | cut -c$((path_wc+1))-)
			snapshot=$(realpath -esq "$path_snapshot$path_relative")
			if [ ! -z "$snapshot" ]; then
				echo "remove opaque: $snapshot"
				rm -r "$snapshot"
			fi
		fi
	done < <(getfattr --dump --match="trusted.overlay.opaque" \
					--absolute-names --physical --recursive \
					"$path_dirty")

	# move directory
	echo "move dir: $path_dirty -> $path_snapshot"
	cp -aTf "$path_dirty" "$path_snapshot"
	rm -r "$path_dirty"
	mkdir "$path_dirty"
}

#############################################################
# OverlayFS sometimes produce files that are not modified.
# (i.e., when you open file for r/w but not writing down anything)
# This function detects if a snapshot file is identical to its 
# corresponding pair in rootfs, then remove it from snapshot 
# directory.
#############################################################
prune_one() {
	local path_snapshot="$1"
	local path_rootfs="$2"

	# both files present
	if [ ! -z "$path_snapshot" ] && [ ! -z "$path_rootfs" ]; then
		if ! is_opaque "$path_snapshot" && \
			same_meta "$path_snapshot" "$path_rootfs" && \
			same_content "$path_snapshot" "$path_rootfs"; then
			echo "possible dup: $path_snapshot"
			rm "$path_snapshot" >/dev/null 2>&1 || \
			rmdir "$path_snapshot" >/dev/null 2>&1 && \
			echo "remove dup: $path_snapshot"
		fi
	fi
}
prune_all() {
	local snapshot_dir="$1"
	local rootfs_dir="$2"

	# directory doesn't exist or is empty
	if [ ! -d "$snapshot_dir" ] || [ -z "$(ls -A $snapshot_dir)" ]; then
		echo "nothing to prune"
		exit 0
	fi

	# compare file one-by-one
	walk_dir "$snapshot_dir" "$rootfs_dir" prune_one
}

#############################################################
# Copy a file from snapshot directory to rootfs.
# If a directory is marked 'opaque' in snapshot, remove its 
# corresponding pair in rootfs.
# If a file/directory is a device file, remove its 
# corresponding pair in rootfs.
#############################################################
merge_one() {
	local path_snapshot="$1"
	local path_rootfs="$2"

	if [ ! -z "$path_snapshot" ]; then
		if is_opaque "$path_snapshot"; then
			echo "replace dir: $path_snapshot"
			rm -r "$path_rootfs" && \
			mv -T "$path_snapshot" "$path_rootfs"
			setfattr --remove="trusted.overlay.opaque" "$path_rootfs" # remove xattr
		elif is_removed "$path_snapshot"; then
			echo "remove: $path_snapshot"
			rm -r "$path_snapshot"
			rm -r "$path_rootfs"
		fi
	fi
}
merge_all() {
	local snapshot_dir="$1"
	local rootfs_dir="$2"

	# directory doesn't exist or is empty
	if [ ! -d "$snapshot_dir" ] || [ -z "$(ls -A $snapshot_dir)" ]; then
		echo "nothing to merge"
		exit 0
	fi

	# process files marked for removal
	walk_dir "$snapshot_dir" "$rootfs_dir" merge_one

	# move directory
	echo "move dir: $snapshot_dir -> $snapshot_dir"
	cp -aTf "$snapshot_dir" "$snapshot_dir"
	rm -r "$snapshot_dir"
	mkdir "$snapshot_dir"
}

#############################################################
# Walk thru the upper directory.
# Based on file path from the upper dir, generate the file
# path for the lower dir.
# Then call the callback function on these two paths.
# Arguments:
#   $1: upper directory
#   $2: lower directory
#   $3: callback function on each file found in the upper dir
#       func(upper_file, lower_file)
#############################################################
walk_dir() {
	local upper="$1"
	local lower="$2"
	local callback="$3"

	OIFS=$IFS; IFS=$'\n' # backup separator
	local path_list=($(find "$upper/"))
	path_list=("${path_list[@]:1}") # omit '/'
	local path_wc=$(echo $upper | tr -d '\n\r' | wc -c) # word count w/o newline
	printf "%-50s   %s\n" "[upper]" "[lower]"
	for path in "${path_list[@]}"; do
		path_relative=$(echo "$path" | cut -c$((path_wc+1))-)
		path_upper=$(realpath -esq "$path")
		path_lower=$(realpath -esq "$lower$path_relative")

		printf "%-50s | %s\n" "$path_upper" "$path_lower"
		$callback "$path_upper" "$path_lower"
	done
	IFS=$OIFS # restore separator
}

#############################################################
# Input a literal variable name, check if that variable is
# undefined or empty in bash.
#############################################################
check_var() {
	local var="$1"
	local silent="$2"

	local val="${!var}"
	if [ -z "$val" ]; then
		[ "$slient" != "-s" ] && echo "Invalid \"$var\"!"
		return 1
	fi
	return 0
}


# main()
case "$CMD" in
	commit)
		check_var DIRTY_DIR || exit 2
		check_var SNAPS_DIR || exit 2
		commit_all "$DIRTY_DIR" "$SNAPS_DIR"
		;;
	prune)
		check_var SNAPS_DIR || exit 2
		check_var ROOTFS_DIR || exit 2
		prune_all "$SNAPS_DIR" "$ROOTFS_DIR"
		;;
	merge)
		check_var SNAPS_DIR || exit 2 # directory not exist
		check_var ROOTFS_DIR || exit 2 # directory not exist
		merge_all "$SNAPS_DIR" "$ROOTFS_DIR"
		;;
	*)
		echo "Invalid command!"
		help
		exit 2
		;;
esac
